"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _dropIndex = require('./dropIndex');
var _shared = require('./shared');
function createIndex(mOptions) {
  const _create = (tableName, rawColumns, options = {}) => {
    const columns = Array.isArray(rawColumns) ? rawColumns.slice() : [rawColumns];
    if (options.opclass) {
      mOptions.logger.warn(
        "Using opclass is deprecated. You should use it as part of column definition e.g. pgm.createIndex('table', [['column', 'opclass', 'ASC']])"
      );
      const lastIndex = columns.length - 1;
      const lastColumn = columns[lastIndex];
      if (typeof lastColumn === "string") {
        columns[lastIndex] = { name: lastColumn, opclass: options.opclass };
      } else if (lastColumn.opclass) {
        throw new Error(
          "There is already defined opclass on column, can't override it with global one"
        );
      } else {
        columns[lastIndex] = { ...lastColumn, opclass: options.opclass };
      }
    }
    const indexName = _shared.generateIndexName.call(void 0, 
      typeof tableName === "object" ? tableName.name : tableName,
      columns,
      options,
      mOptions.schemalize
    );
    const columnsString = _shared.generateColumnsString.call(void 0, columns, mOptions);
    const unique = options.unique ? " UNIQUE" : "";
    const concurrently = options.concurrently ? " CONCURRENTLY" : "";
    const ifNotExistsStr = options.ifNotExists ? " IF NOT EXISTS" : "";
    const method = options.method ? ` USING ${options.method}` : "";
    const where = options.where ? ` WHERE ${options.where}` : "";
    const include = options.include ? ` INCLUDE (${(Array.isArray(options.include) ? options.include : [options.include]).map(mOptions.literal).join(", ")})` : "";
    const indexNameStr = mOptions.literal(indexName);
    const tableNameStr = mOptions.literal(tableName);
    return `CREATE${unique} INDEX${concurrently}${ifNotExistsStr} ${indexNameStr} ON ${tableNameStr}${method} (${columnsString})${include}${where};`;
  };
  _create.reverse = _dropIndex.dropIndex.call(void 0, mOptions);
  return _create;
}


exports.createIndex = createIndex;
