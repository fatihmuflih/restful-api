import { formatLines, intersection, makeComment } from "../../utils";
import { dropTable } from "./dropTable";
import { parseColumns, parseConstraints, parseLike } from "./shared";
function createTable(mOptions) {
  const _create = (tableName, columns, options = {}) => {
    const {
      temporary,
      ifNotExists,
      inherits,
      like,
      constraints: optionsConstraints = {},
      comment
    } = options;
    const {
      columns: columnLines,
      constraints: crossColumnConstraints,
      comments: columnComments = []
    } = parseColumns(tableName, columns, mOptions);
    const dupes = intersection(
      Object.keys(optionsConstraints),
      Object.keys(crossColumnConstraints)
    );
    if (dupes.length > 0) {
      const dupesStr = dupes.join(", ");
      throw new Error(
        `There is duplicate constraint definition in table and columns options: ${dupesStr}`
      );
    }
    const constraints = {
      ...optionsConstraints,
      ...crossColumnConstraints
    };
    const { constraints: constraintLines, comments: constraintComments } = parseConstraints(tableName, constraints, "", mOptions.literal);
    const tableDefinition = [...columnLines, ...constraintLines].concat(
      like ? [parseLike(like, mOptions.literal)] : []
    );
    const temporaryStr = temporary ? " TEMPORARY" : "";
    const ifNotExistsStr = ifNotExists ? " IF NOT EXISTS" : "";
    const inheritsStr = inherits ? ` INHERITS (${mOptions.literal(inherits)})` : "";
    const tableNameStr = mOptions.literal(tableName);
    const createTableQuery = `CREATE${temporaryStr} TABLE${ifNotExistsStr} ${tableNameStr} (
${formatLines(tableDefinition)}
)${inheritsStr};`;
    const comments = [...columnComments, ...constraintComments];
    if (typeof comment !== "undefined") {
      comments.push(makeComment("TABLE", mOptions.literal(tableName), comment));
    }
    return `${createTableQuery}${comments.length > 0 ? `
${comments.join("\n")}` : ""}`;
  };
  _create.reverse = dropTable(mOptions);
  return _create;
}
export {
  createTable
};
