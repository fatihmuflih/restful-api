"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _utils = require('../../utils');
var _dropTable = require('./dropTable');
var _shared = require('./shared');
function createTable(mOptions) {
  const _create = (tableName, columns, options = {}) => {
    const {
      temporary,
      ifNotExists,
      inherits,
      like,
      constraints: optionsConstraints = {},
      comment
    } = options;
    const {
      columns: columnLines,
      constraints: crossColumnConstraints,
      comments: columnComments = []
    } = _shared.parseColumns.call(void 0, tableName, columns, mOptions);
    const dupes = _utils.intersection.call(void 0, 
      Object.keys(optionsConstraints),
      Object.keys(crossColumnConstraints)
    );
    if (dupes.length > 0) {
      const dupesStr = dupes.join(", ");
      throw new Error(
        `There is duplicate constraint definition in table and columns options: ${dupesStr}`
      );
    }
    const constraints = {
      ...optionsConstraints,
      ...crossColumnConstraints
    };
    const { constraints: constraintLines, comments: constraintComments } = _shared.parseConstraints.call(void 0, tableName, constraints, "", mOptions.literal);
    const tableDefinition = [...columnLines, ...constraintLines].concat(
      like ? [_shared.parseLike.call(void 0, like, mOptions.literal)] : []
    );
    const temporaryStr = temporary ? " TEMPORARY" : "";
    const ifNotExistsStr = ifNotExists ? " IF NOT EXISTS" : "";
    const inheritsStr = inherits ? ` INHERITS (${mOptions.literal(inherits)})` : "";
    const tableNameStr = mOptions.literal(tableName);
    const createTableQuery = `CREATE${temporaryStr} TABLE${ifNotExistsStr} ${tableNameStr} (
${_utils.formatLines.call(void 0, tableDefinition)}
)${inheritsStr};`;
    const comments = [...columnComments, ...constraintComments];
    if (typeof comment !== "undefined") {
      comments.push(_utils.makeComment.call(void 0, "TABLE", mOptions.literal(tableName), comment));
    }
    return `${createTableQuery}${comments.length > 0 ? `
${comments.join("\n")}` : ""}`;
  };
  _create.reverse = _dropTable.dropTable.call(void 0, mOptions);
  return _create;
}


exports.createTable = createTable;
